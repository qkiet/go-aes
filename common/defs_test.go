package common

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_BytesToWords(t *testing.T) {
	input0 := []byte{0x00, 0x01, 0x02, 0x03}
	expect0 := []AesWord{
		{0x00, 0x01, 0x02, 0x03},
	}
	cal0, err := BytesToWords(input0)
	assert.NoError(t, err)
	assert.Equal(t, expect0, cal0)

	input1 := []byte{0x00, 0x01, 0x02, 0x03, 0x04}
	_, err = BytesToWords(input1)
	assert.Error(t, err)

	input2 := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}
	expect2 := []AesWord{
		{0x00, 0x01, 0x02, 0x03},
		{0x04, 0x05, 0x06, 0x07},
	}
	cal2, err := BytesToWords(input2)
	assert.NoError(t, err)
	assert.Equal(t, expect2, cal2)
}

func Test_WordsToBytes(t *testing.T) {
	input0 := []AesWord{
		{0x00, 0x01, 0x02, 0x03},
	}
	expect0 := []byte{
		0x00, 0x01, 0x02, 0x03,
	}
	cal0 := WordsToBytes(input0)
	assert.Equal(t, expect0, cal0)

	input1 := []AesWord{
		{0x00, 0x01, 0x02, 0x03},
		{0x04, 0x05, 0x06, 0x07}}
	expect1 := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}
	cal1 := WordsToBytes(input1)
	assert.Equal(t, expect1, cal1)
}

func Test_BytesToAesState(t *testing.T) {
	input0 := []byte{
		0x00, 0x01, 0x02, 0x03,
		0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b,
		0x0c, 0x0d, 0x0e, 0x0f,
	}
	expect0 := AesState{
		{0x00, 0x04, 0x08, 0x0c},
		{0x01, 0x05, 0x09, 0x0d},
		{0x02, 0x06, 0x0a, 0x0e},
		{0x03, 0x07, 0x0b, 0x0f},
	}
	cal0, err := BytesToAesState(input0)
	assert.NoError(t, err)
	assert.Equal(t, expect0, cal0)

	input1 := []byte{
		0x00, 0x01, 0x02, 0x03,
		0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b,
		0x0c, 0x0d, 0x0e, 0x0f,
		0x10,
	}
	_, err = BytesToAesState(input1)
	assert.Error(t, err)
}

func Test_WordsToAesState(t *testing.T) {
	input0 := []AesWord{
		{0x00, 0x01, 0x02, 0x03},
		{0x04, 0x05, 0x06, 0x07},
		{0x08, 0x09, 0x0a, 0x0b},
		{0x0c, 0x0d, 0x0e, 0x0f},
	}
	expect0 := AesState{
		{0x00, 0x04, 0x08, 0x0c},
		{0x01, 0x05, 0x09, 0x0d},
		{0x02, 0x06, 0x0a, 0x0e},
		{0x03, 0x07, 0x0b, 0x0f},
	}
	cal0, err := WordsToAesState(input0)
	assert.NoError(t, err)
	assert.Equal(t, expect0, cal0)

	input1 := []AesWord{
		{0x00, 0x01, 0x02, 0x03},
		{0x04, 0x05, 0x06, 0x07},
		{0x08, 0x09, 0x0a, 0x0b},
		{0x0c, 0x0d, 0x0e, 0x0f},
		{0x10, 0x11, 0x12, 0x13},
	}
	_, err = WordsToAesState(input1)
	assert.Error(t, err)
}

func Test_AesStateToBytes(t *testing.T) {
	input := AesState{
		{0x00, 0x04, 0x08, 0x0c},
		{0x01, 0x05, 0x09, 0x0d},
		{0x02, 0x06, 0x0a, 0x0e},
		{0x03, 0x07, 0x0b, 0x0f},
	}
	expect := []byte{
		0x00, 0x01, 0x02, 0x03,
		0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b,
		0x0c, 0x0d, 0x0e, 0x0f,
	}
	cal := AesStateToBytes(input)
	assert.Equal(t, expect, cal)
}

func Test_BytesToAes128Key(t *testing.T) {
	input0 := []byte{
		0x00, 0x04, 0x08, 0x0c,
		0x01, 0x05, 0x09, 0x0d,
		0x02, 0x06, 0x0a, 0x0e,
		0x03, 0x07, 0x0b, 0x0f,
	}
	expect0 := Aes128Key{
		0x00, 0x04, 0x08, 0x0c,
		0x01, 0x05, 0x09, 0x0d,
		0x02, 0x06, 0x0a, 0x0e,
		0x03, 0x07, 0x0b, 0x0f,
	}
	k, err := BytesToAes128Key(input0)
	assert.NoError(t, err)
	assert.Equal(t, expect0, k)
	input1 := []byte{
		0x00, 0x04, 0x08, 0x0c,
		0x01, 0x05, 0x09, 0x0d,
		0x02, 0x06, 0x0a, 0x0e,
		0x03, 0x07, 0x0b, 0x0f,
		0x03, 0x07, 0x0b, 0x0f,
	}
	_, err = BytesToAes128Key(input1)
	assert.Error(t, err)
}

func Test_Aes128KeyToBytes(t *testing.T) {
	input0 := Aes128Key{
		0x00, 0x04, 0x08, 0x0c,
		0x01, 0x05, 0x09, 0x0d,
		0x02, 0x06, 0x0a, 0x0e,
		0x03, 0x07, 0x0b, 0x0f,
	}
	expect0 := []byte{
		0x00, 0x04, 0x08, 0x0c,
		0x01, 0x05, 0x09, 0x0d,
		0x02, 0x06, 0x0a, 0x0e,
		0x03, 0x07, 0x0b, 0x0f,
	}
	k := Aes128KeyToBytes(input0)
	assert.Equal(t, expect0, k)
}
